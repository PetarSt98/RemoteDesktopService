{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pstojkov\\\\cernbox\\\\WINDOWS\\\\Desktop\\\\C\\\\Taskify\\\\taskify\\\\src\\\\Components\\\\UserSearch.tsx\",\n  _s = $RefreshSig$();\n// components/UserSearch.tsx\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserSearch = () => {\n  _s();\n  const [userName, setUserName] = useState('');\n  const [devices, setDevices] = useState([]);\n  const handleSearch = async () => {\n    // Here, you call the API to get the user's devices based on the user name.\n    try {\n      const response = await fetch(`http://your-backend-address/api/user/search?userName=${userName}`);\n      if (!response.ok) {\n        throw new Error(\"HTTP status \" + response.status);\n      }\n      const data = await response.json();\n      setDevices(data);\n    } catch (error) {\n      console.error(\"Failed to fetch devices: \", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '1rem 0',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userName,\n      onChange: e => setUserName(e.target.value),\n      placeholder: \"Search user...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), devices && devices.map(device => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: device\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 41\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(UserSearch, \"2z55AqButqvrbNUA6kolFpyleek=\");\n_c = UserSearch;\nexport default UserSearch;\nvar _c;\n$RefreshReg$(_c, \"UserSearch\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","UserSearch","_s","userName","setUserName","devices","setDevices","handleSearch","response","fetch","ok","Error","status","data","json","error","console","style","margin","textAlign","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","device","_c","$RefreshReg$"],"sources":["C:/Users/pstojkov/cernbox/WINDOWS/Desktop/C/Taskify/taskify/src/Components/UserSearch.tsx"],"sourcesContent":["// components/UserSearch.tsx\r\nimport React, { useState } from 'react';\r\n\r\nconst UserSearch: React.FC = () => {\r\n  const [userName, setUserName] = useState('');\r\n  const [devices, setDevices] = useState<string[]>([]);\r\n\r\n  const handleSearch = async () => {\r\n    // Here, you call the API to get the user's devices based on the user name.\r\n    try {\r\n      const response = await fetch(`http://your-backend-address/api/user/search?userName=${userName}`);\r\n      if (!response.ok) {\r\n        throw new Error(\"HTTP status \" + response.status);\r\n      }\r\n      const data = await response.json();\r\n      setDevices(data);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch devices: \", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{margin: '1rem 0', textAlign: 'center'}}>\r\n      <input \r\n        type=\"text\" \r\n        value={userName} \r\n        onChange={e => setUserName(e.target.value)} \r\n        placeholder=\"Search user...\"\r\n      />\r\n      <button onClick={handleSearch}>Search</button>\r\n      {devices && devices.map(device => <p>{device}</p>)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserSearch;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,UAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAW,EAAE,CAAC;EAEpD,MAAMS,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B;IACA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,wDAAuDN,QAAS,EAAC,CAAC;MAChG,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,cAAc,GAAGH,QAAQ,CAACI,MAAM,CAAC;MACnD;MACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClCR,UAAU,CAACO,IAAI,CAAC;IAClB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,oBACEf,OAAA;IAAKiB,KAAK,EAAE;MAACC,MAAM,EAAE,QAAQ;MAAEC,SAAS,EAAE;IAAQ,CAAE;IAAAC,QAAA,gBAClDpB,OAAA;MACEqB,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEnB,QAAS;MAChBoB,QAAQ,EAAEC,CAAC,IAAIpB,WAAW,CAACoB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC3CI,WAAW,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,eACF9B,OAAA;MAAQ+B,OAAO,EAAExB,YAAa;MAAAa,QAAA,EAAC;IAAM;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC7CzB,OAAO,IAAIA,OAAO,CAAC2B,GAAG,CAACC,MAAM,iBAAIjC,OAAA;MAAAoB,QAAA,EAAIa;IAAM;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEV,CAAC;AAAA5B,EAAA,CA9BKD,UAAoB;AAAAiC,EAAA,GAApBjC,UAAoB;AAgC1B,eAAeA,UAAU;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}